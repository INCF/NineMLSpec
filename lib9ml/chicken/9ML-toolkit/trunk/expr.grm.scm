(require-extension lalr-driver)
(define expr-parser
  (lr-driver
    '#(((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* -2))
       ((*default* -3) (LPAREN 10))
       ((*default* *error*)
        (*eoi* 21)
        (QUESTION 20)
        (< 19)
        (> 18)
        (>= 17)
        (<= 16)
        (+ 15)
        (- 14)
        (* 13)
        (/ 12)
        (^ 11))
       ((*default* *error*)
        (RPAREN 22)
        (QUESTION 20)
        (< 19)
        (> 18)
        (>= 17)
        (<= 16)
        (+ 15)
        (- 14)
        (* 13)
        (/ 12)
        (^ 11))
       ((*default* -10) (^ 11) (/ 12) (* 13))
       ((*default* *error*)
        (THEN 23)
        (QUESTION 20)
        (< 19)
        (> 18)
        (>= 17)
        (<= 16)
        (+ 15)
        (- 14)
        (* 13)
        (/ 12)
        (^ 11))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (RPAREN 24) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (= 34) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (= 36) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* -1) (*eoi* accept))
       ((*default* -20))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* -4))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (RPAREN 40) (- 2) (LPAREN 1))
       ((*default* -21)
        (QUESTION 20)
        (< 19)
        (> 18)
        (>= 17)
        (<= 16)
        (+ 15)
        (* 13)
        (/ 12)
        (^ 11)
        (- 14))
       ((*default* -11) (^ 11))
       ((*default* -9) (^ 11))
       ((*default* -8) (^ 11))
       ((*default* -7) (^ 11) (/ 12) (* 13))
       ((*default* -6) (^ 11) (/ 12) (* 13))
       ((*default* -14) (^ 11) (/ 12) (* 13) (- 14) (+ 15))
       ((*default* -15) (^ 11) (/ 12) (* 13) (- 14) (+ 15))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* -16) (^ 11) (/ 12) (* 13) (- 14) (+ 15))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* -17) (^ 11) (/ 12) (* 13) (- 14) (+ 15))
       ((*default* *error*)
        (QUESTION 20)
        (COLON 44)
        (< 19)
        (> 18)
        (>= 17)
        (<= 16)
        (+ 15)
        (- 14)
        (* 13)
        (/ 12)
        (^ 11))
       ((*default* *error*)
        (ELSE 45)
        (QUESTION 20)
        (< 19)
        (> 18)
        (>= 17)
        (<= 16)
        (+ 15)
        (- 14)
        (* 13)
        (/ 12)
        (^ 11))
       ((*default* -5))
       ((*default* -22)
        (QUESTION 20)
        (< 19)
        (> 18)
        (>= 17)
        (<= 16)
        (+ 15)
        (* 13)
        (/ 12)
        (^ 11)
        (- 14))
       ((*default* -13) (^ 11) (/ 12) (* 13) (- 14) (+ 15))
       ((*default* -12) (^ 11) (/ 12) (* 13) (- 14) (+ 15))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* *error*) (ID 5) (NUM 4) (IF 3) (- 2) (LPAREN 1))
       ((*default* -18)
        (^ 11)
        (/ 12)
        (* 13)
        (- 14)
        (+ 15)
        (<= 16)
        (>= 17)
        (> 18)
        (< 19)
        (QUESTION 20))
       ((*default* -19)
        (^ 11)
        (/ 12)
        (* 13)
        (- 14)
        (+ 15)
        (<= 16)
        (>= 17)
        (> 18)
        (< 19)
        (QUESTION 20)))
    (vector
      '((1 . 6))
      '((1 . 7))
      '((1 . 8))
      '((1 . 9))
      '()
      '()
      '()
      '()
      '()
      '()
      '((2 . 25) (1 . 26))
      '((1 . 27))
      '((1 . 28))
      '((1 . 29))
      '((1 . 30))
      '((1 . 31))
      '((1 . 32))
      '((1 . 33))
      '((1 . 35))
      '((1 . 37))
      '((1 . 38))
      '()
      '()
      '((1 . 39))
      '()
      '((1 . 41))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((1 . 42))
      '()
      '((1 . 43))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((1 . 46))
      '((1 . 47))
      '()
      '())
    (vector
      '()
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          $1))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 1 (exact->inexact $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 1 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 1 `(,$1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 1 `(,$1 unquote (reverse $3)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 1 `(+ ,$1 ,$3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 1 `(- ,$1 ,$3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 1 `(* ,$1 ,$3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 1 `(/ ,$1 ,$3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 1 `(- ,$2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 1 `(pow ,$1 ,$3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 1 `(<= ,$1 ,$4))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 1 `(>= ,$1 ,$4))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 1 `(<= ,$1 ,$3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 1 `(>= ,$1 ,$3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 1 `(> ,$1 ,$3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 1 `(< ,$1 ,$3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($5 (vector-ref ___stack (- ___sp 1)))
               ($4 (vector-ref ___stack (- ___sp 3)))
               ($3 (vector-ref ___stack (- ___sp 5)))
               ($2 (vector-ref ___stack (- ___sp 7)))
               ($1 (vector-ref ___stack (- ___sp 9))))
          (___push 5 1 `(if ,$1 ,$3 ,$5))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($6 (vector-ref ___stack (- ___sp 1)))
               ($5 (vector-ref ___stack (- ___sp 3)))
               ($4 (vector-ref ___stack (- ___sp 5)))
               ($3 (vector-ref ___stack (- ___sp 7)))
               ($2 (vector-ref ___stack (- ___sp 9)))
               ($1 (vector-ref ___stack (- ___sp 11))))
          (___push 6 1 `(if ,$2 ,$4 ,$6))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 1 $2)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 2 (list $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 2 (cons $2 $1)))))))

