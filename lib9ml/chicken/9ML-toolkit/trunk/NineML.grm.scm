(require-extension lalr-driver)
(define parser
  (lr-driver
    '#(((*default* *error*) (TYPE 3) (VALUE 2) (MODULE 1))
       ((*default* *error*) (IDENT 6))
       ((*default* *error*) (IDENT 7))
       ((*default* -47) (LPAREN 9) (QUOTE 8))
       ((*default* -67) (SEMICOLON 13))
       ((*default* *error*) (*eoi* 15))
       ((*default* *error*) (EQUAL 17) (COLON 16))
       ((*default* *error*) (IDENT 19) (EQUAL 18))
       ((*default* *error*) (IDENT 21))
       ((*default* *error*) (QUOTE 8))
       ((*default* -48))
       ((*default* *error*) (IDENT 24))
       ((*default* -64))
       ((*default* -68))
       ((*default* -2) (TYPE 3) (VALUE 2) (MODULE 1))
       ((*default* -1) (*eoi* accept))
       ((*default* *error*) (SIG 28) (FUNCTOR 27) (LPAREN 26))
       ((*default* *error*) (IDENT 33) (STRUCT 32) (FUNCTOR 31) (LPAREN 30))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*) (IDENT 19) (EQUAL 18))
       ((*default* -63))
       ((*default* -52))
       ((*default* -50))
       ((*default* *error*) (RPAREN 54) (COMMA 53))
       ((*default* *error*) (EQUAL 55))
       ((*default* -3))
       ((*default* *error*) (SIG 28) (FUNCTOR 27) (LPAREN 26))
       ((*default* *error*) (LPAREN 57))
       ((*default* -72))
       ((*default* *error*) (EQUAL 59))
       ((*default* *error*) (IDENT 33) (STRUCT 32) (FUNCTOR 31) (LPAREN 30))
       ((*default* *error*) (LPAREN 61))
       ((*default* -61))
       ((*default* -4))
       ((*default* -66) (LPAREN 64) (COLON 63))
       ((*default* -55) (DOT 65))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*) (IDENT 67))
       ((*default* -32))
       ((*default* *error*) (IDENT 68))
       ((*default* -23))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*) (IDENT 70))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* -29))
       ((*default* -30))
       ((*default* -28))
       ((*default* -27))
       ((*default* -24))
       ((*default* -6)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (QEXPR 38)
        (LPAREN 36))
       ((*default* -33)
        (COMMA 83)
        (LG 82)
        (LESS 81)
        (LEQ 80)
        (GREATER 79)
        (GEQ 78)
        (EQEQ 77)
        (PLUS 76)
        (MINUS 75)
        (STAR 74)
        (SLASH 73))
       ((*default* -26) (DOT 65))
       ((*default* -34))
       ((*default* *error*) (QUOTE 8))
       ((*default* -49))
       ((*default* *error*) (IDENT 33) (LPAREN 86) (QUOTE 85))
       ((*default* *error*) (RPAREN 89))
       ((*default* *error*) (IDENT 90))
       ((*default* *error*) (END 94) (TYPE 93) (VALUE 92) (MODULE 91))
       ((*default* *error*) (IDENT 33) (STRUCT 32) (FUNCTOR 31) (LPAREN 30))
       ((*default* *error*) (RPAREN 97) (LPAREN 64) (COLON 63))
       ((*default* *error*) (IDENT 98))
       ((*default* *error*) (END 99) (TYPE 3) (VALUE 2) (MODULE 1))
       ((*default* *error*) (SIG 28) (FUNCTOR 27) (LPAREN 26))
       ((*default* *error*) (IDENT 33) (STRUCT 32) (FUNCTOR 31) (LPAREN 30))
       ((*default* *error*) (IDENT 103))
       ((*default* *error*)
        (RPAREN 104)
        (COMMA 83)
        (LG 82)
        (LESS 81)
        (LEQ 80)
        (GREATER 79)
        (GEQ 78)
        (EQEQ 77)
        (PLUS 76)
        (MINUS 75)
        (STAR 74)
        (SLASH 73))
       ((*default* *error*) (IDENT 19) (EQUAL 18))
       ((*default* *error*) (DARROW 106))
       ((*default* -20)
        (SLASH 73)
        (STAR 74)
        (MINUS 75)
        (PLUS 76)
        (EQEQ 77)
        (GEQ 78)
        (GREATER 79)
        (LEQ 80)
        (LESS 81)
        (LG 82)
        (COMMA 83))
       ((*default* *error*) (IDENT 19) (EQUAL 18))
       ((*default* *error*)
        (THEN 108)
        (COMMA 83)
        (LG 82)
        (LESS 81)
        (LEQ 80)
        (GREATER 79)
        (GEQ 78)
        (EQEQ 77)
        (PLUS 76)
        (MINUS 75)
        (STAR 74)
        (SLASH 73))
       ((*default* -25))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* -51))
       ((*default* *error*) (IDENT 120))
       ((*default* *error*) (IDENT 33) (LPAREN 86) (QUOTE 85))
       ((*default* -46) (IDENT 33) (STAR 124) (ARROW 123))
       ((*default* -38) (DOT 65))
       ((*default* -71))
       ((*default* *error*) (COLON 126))
       ((*default* *error*) (IDENT 127))
       ((*default* *error*) (IDENT 128))
       ((*default* -47) (LPAREN 9) (QUOTE 8))
       ((*default* -69))
       ((*default* -67) (SEMICOLON 13))
       ((*default* -65) (LPAREN 64) (COLON 63))
       ((*default* -59))
       ((*default* *error*) (COLON 134))
       ((*default* -56))
       ((*default* -67) (SEMICOLON 13))
       ((*default* -60))
       ((*default* *error*) (RPAREN 136) (LPAREN 64) (COLON 63))
       ((*default* -5))
       ((*default* -31))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*) (IN 139))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* -11))
       ((*default* -10))
       ((*default* -9))
       ((*default* -8))
       ((*default* -12) (SLASH 73) (STAR 74) (MINUS 75) (PLUS 76))
       ((*default* -17) (SLASH 73) (STAR 74) (MINUS 75) (PLUS 76))
       ((*default* -16) (SLASH 73) (STAR 74) (MINUS 75) (PLUS 76))
       ((*default* -15) (SLASH 73) (STAR 74) (MINUS 75) (PLUS 76))
       ((*default* -14) (SLASH 73) (STAR 74) (MINUS 75) (PLUS 76))
       ((*default* -13) (SLASH 73) (STAR 74) (MINUS 75) (PLUS 76))
       ((*default* -7)
        (SLASH 73)
        (STAR 74)
        (MINUS 75)
        (PLUS 76)
        (EQEQ 77)
        (GEQ 78)
        (GREATER 79)
        (LEQ 80)
        (LESS 81)
        (LG 82))
       ((*default* -35))
       ((*default* *error*) (RPAREN 142) (COMMA 141))
       ((*default* -41) (IDENT 33) (STAR 124) (ARROW 123))
       ((*default* *error*) (IDENT 33) (LPAREN 86) (QUOTE 85))
       ((*default* *error*) (IDENT 33) (LPAREN 86) (QUOTE 85))
       ((*default* -39) (DOT 65))
       ((*default* *error*) (SIG 28) (FUNCTOR 27) (LPAREN 26))
       ((*default* *error*) (COLON 146))
       ((*default* *error*) (COLON 147))
       ((*default* -75))
       ((*default* *error*) (IDENT 150))
       ((*default* -53))
       ((*default* -54))
       ((*default* -73))
       ((*default* *error*) (SIG 28) (FUNCTOR 27) (LPAREN 26))
       ((*default* -62))
       ((*default* -58))
       ((*default* -21)
        (SLASH 73)
        (STAR 74)
        (MINUS 75)
        (PLUS 76)
        (EQEQ 77)
        (GEQ 78)
        (GREATER 79)
        (LEQ 80)
        (LESS 81)
        (LG 82)
        (COMMA 83))
       ((*default* -18))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* *error*)
        (ELSE 153)
        (COMMA 83)
        (LG 82)
        (LESS 81)
        (LEQ 80)
        (GREATER 79)
        (GEQ 78)
        (EQEQ 77)
        (PLUS 76)
        (MINUS 75)
        (STAR 74)
        (SLASH 73))
       ((*default* *error*) (IDENT 33) (LPAREN 86) (QUOTE 85))
       ((*default* *error*) (IDENT 33))
       ((*default* -36) (IDENT 33) (STAR 124) (ARROW 123))
       ((*default* -37) (IDENT 33) (STAR 124) (ARROW 123))
       ((*default* *error*) (RPAREN 156))
       ((*default* *error*) (SIG 28) (FUNCTOR 27) (LPAREN 26))
       ((*default* -44))
       ((*default* *error*) (IDENT 33) (LPAREN 86) (QUOTE 85))
       ((*default* -74))
       ((*default* -45) (EQUAL 55))
       ((*default* *error*) (RPAREN 159))
       ((*default* -19)
        (SLASH 73)
        (STAR 74)
        (MINUS 75)
        (PLUS 76)
        (EQEQ 77)
        (GEQ 78)
        (GREATER 79)
        (LEQ 80)
        (LESS 81)
        (LG 82)
        (COMMA 83))
       ((*default* *error*)
        (IDENT 33)
        (LABEL 47)
        (STRING 46)
        (NAT 45)
        (REAL 44)
        (IF 43)
        (LET 42)
        (RETURN 41)
        (SEXPR 40)
        (FUNCTION 39)
        (QEXPR 38)
        (VALUE 37)
        (LPAREN 36))
       ((*default* -42) (IDENT 33) (STAR 124) (ARROW 123))
       ((*default* -40) (DOT 65))
       ((*default* *error*) (SIG 28) (FUNCTOR 27) (LPAREN 26))
       ((*default* -76))
       ((*default* -43) (IDENT 33) (STAR 124) (ARROW 123))
       ((*default* *error*) (IDENT 33) (STRUCT 32) (FUNCTOR 31) (LPAREN 30))
       ((*default* -22)
        (SLASH 73)
        (STAR 74)
        (MINUS 75)
        (PLUS 76)
        (EQEQ 77)
        (GEQ 78)
        (GREATER 79)
        (LEQ 80)
        (LESS 81)
        (LG 82)
        (COMMA 83))
       ((*default* -70))
       ((*default* -57) (COLON 63) (LPAREN 64)))
    (vector
      '((19 . 4) (1 . 5))
      '()
      '()
      '((15 . 10) (13 . 11) (12 . 12))
      '((20 . 14))
      '()
      '()
      '((6 . 20))
      '()
      '((15 . 22) (14 . 23))
      '()
      '()
      '()
      '()
      '((19 . 4) (1 . 25))
      '()
      '((21 . 29))
      '((17 . 34) (2 . 35))
      '((5 . 48) (4 . 49) (3 . 50) (2 . 51))
      '((6 . 52))
      '()
      '()
      '()
      '()
      '()
      '()
      '((21 . 56))
      '()
      '((22 . 58))
      '()
      '((17 . 60) (2 . 35))
      '()
      '((18 . 62))
      '()
      '()
      '()
      '((5 . 48) (4 . 49) (3 . 66) (2 . 51))
      '()
      '()
      '()
      '()
      '((5 . 48) (4 . 49) (3 . 69) (2 . 51))
      '()
      '((5 . 48) (4 . 49) (3 . 71) (2 . 51))
      '()
      '()
      '()
      '()
      '()
      '((5 . 72) (2 . 51))
      '()
      '()
      '()
      '((15 . 84))
      '()
      '((7 . 87) (2 . 88))
      '()
      '()
      '((23 . 95))
      '((17 . 96) (2 . 35))
      '()
      '()
      '((19 . 100))
      '((21 . 101))
      '((17 . 102) (2 . 35))
      '()
      '()
      '((6 . 105))
      '()
      '()
      '((6 . 107))
      '()
      '()
      '((5 . 48) (4 . 49) (3 . 109) (2 . 51))
      '((5 . 48) (4 . 49) (3 . 110) (2 . 51))
      '((5 . 48) (4 . 49) (3 . 111) (2 . 51))
      '((5 . 48) (4 . 49) (3 . 112) (2 . 51))
      '((5 . 48) (4 . 49) (3 . 113) (2 . 51))
      '((5 . 48) (4 . 49) (3 . 114) (2 . 51))
      '((5 . 48) (4 . 49) (3 . 115) (2 . 51))
      '((5 . 48) (4 . 49) (3 . 116) (2 . 51))
      '((5 . 48) (4 . 49) (3 . 117) (2 . 51))
      '((5 . 48) (4 . 49) (3 . 118) (2 . 51))
      '((5 . 48) (4 . 49) (3 . 119) (2 . 51))
      '()
      '()
      '((8 . 121) (7 . 122) (2 . 88))
      '((2 . 125))
      '()
      '()
      '()
      '()
      '()
      '((16 . 129) (15 . 10) (13 . 130) (12 . 131) (11 . 132))
      '()
      '((20 . 133))
      '()
      '()
      '()
      '()
      '((20 . 135))
      '()
      '()
      '()
      '()
      '((5 . 48) (4 . 49) (3 . 137) (2 . 51))
      '((5 . 48) (4 . 49) (3 . 138) (2 . 51))
      '()
      '((5 . 48) (4 . 49) (3 . 140) (2 . 51))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((2 . 125))
      '((7 . 143) (2 . 88))
      '((7 . 144) (2 . 88))
      '()
      '((21 . 145))
      '()
      '((10 . 148) (9 . 149))
      '()
      '()
      '()
      '()
      '()
      '((21 . 151))
      '()
      '()
      '()
      '()
      '((5 . 48) (4 . 49) (3 . 152) (2 . 51))
      '()
      '((7 . 154) (2 . 88))
      '((2 . 155))
      '((2 . 125))
      '((2 . 125))
      '()
      '((21 . 157))
      '()
      '((7 . 158) (2 . 88))
      '()
      '()
      '()
      '()
      '((5 . 48) (4 . 49) (3 . 160) (2 . 51))
      '((2 . 125))
      '()
      '((21 . 161))
      '()
      '((2 . 125))
      '((17 . 162) (2 . 35))
      '()
      '()
      '())
    (vector
      '()
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          $1))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 1 (list $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 1 (cons $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 2 (Pident $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 2 (Pdot $1 (ident-name $3)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 3 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (binop "pair" $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (binop "add" $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (binop "sub" $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (binop "mul" $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (binop "div" $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (binop "==" $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (binop "<>" $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (binop "<" $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (binop "<=" $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (binop ">" $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (binop ">=" $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 3 (Function $2 $4))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($5 (vector-ref ___stack (- ___sp 1)))
               ($4 (vector-ref ___stack (- ___sp 3)))
               ($3 (vector-ref ___stack (- ___sp 5)))
               ($2 (vector-ref ___stack (- ___sp 7)))
               ($1 (vector-ref ___stack (- ___sp 9))))
          (___push 5 3 (Let0 $2 $3 $5))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 3 $2)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 3 (Let0 $2 $3 $4))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($6 (vector-ref ___stack (- ___sp 1)))
               ($5 (vector-ref ___stack (- ___sp 3)))
               ($4 (vector-ref ___stack (- ___sp 5)))
               ($3 (vector-ref ___stack (- ___sp 7)))
               ($2 (vector-ref ___stack (- ___sp 9)))
               ($1 (vector-ref ___stack (- ___sp 11))))
          (___push 6 3 (ternop "cond" $2 $4 $6))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push
            1
            3
            (let ((sexpr-label
                    (and (sexpr-macro-label $1)
                         (string->symbol (sexpr-macro-label $1))))
                  (sexpr-text
                    (read (open-input-string
                            (list->string (reverse (sexpr-macro-text $1)))))))
              (parse-sexpr-macro (make-sexpr-macro sexpr-label sexpr-text))))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 4 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 4 (Apply $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (Longid $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (Const `(label ,$1)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (Const `(string ,$1)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (Const `(real ,$1)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (Const `(nat ,$1)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 5 $2)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push
            1
            5
            (begin
              (let recur ((sexpr (reverse
                                   (read (open-input-string (list->string (reverse $1))))))
                          (result (Longid (Pident (ident-create "null")))))
                (if (null? sexpr)
                  result
                  (let ((sv (car sexpr)))
                    (let ((v (cond ((fixnum? sv) (Const `(nat ,sv)))
                                   ((real? sv) (Const `(real ,sv)))
                                   ((string? sv) (Const `(string ,sv)))
                                   ((symbol? sv) (Const `(label ,sv)))
                                   (else
                                    (error 'parse
                                           "invalid constant in literal"
                                           (reverse sexpr))))))
                      (recur (cdr sexpr) (binop "cons" v result))))))))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 6 $2)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 6 (Function $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 7 (Tvar (find-type-variable $2)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 7 (Tcon path-arrow (list $1 $3)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 7 (Tcon path-star (list $1 $3)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 7 (Tcon $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 7 (Tcon $2 (list $1)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 7 (Tcon $4 (reverse $2)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 8 (list $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 8 (cons $3 $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push
            2
            9
            (begin (reset-type-variables) (end-def) (generalize $2)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 10 (begin (begin-def) (reset-type-variables)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 11 (list $2 (make-kind (length $1))))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push
            4
            12
            (begin
              (reset-type-variables)
              (list $2 (make-kind (length $1)) (make-deftype $1 $4))))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 13 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 13 (list $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 13 (reverse $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 14 (list $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 14 (cons $3 $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 15 (find-type-variable $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push
            1
            16
            (begin
              (let ((id (car $1)) (kind (cadr $1)) (def (caddr $1)))
                (list id (make-typedecl kind def)))))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push
            1
            16
            (begin
              (let ((id (car $1)) (kind (cadr $1)))
                (list id (make-typedecl kind #f)))))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 17 (Modid $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 17 (Structure (reverse $2)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($7 (vector-ref ___stack (- ___sp 1)))
               ($6 (vector-ref ___stack (- ___sp 3)))
               ($5 (vector-ref ___stack (- ___sp 5)))
               ($4 (vector-ref ___stack (- ___sp 7)))
               ($3 (vector-ref ___stack (- ___sp 9)))
               ($2 (vector-ref ___stack (- ___sp 11)))
               ($1 (vector-ref ___stack (- ___sp 13))))
          (___push 7 17 (Functor $3 $5 $7))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 17 (Mapply $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 17 $2)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 17 (Constraint $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 18 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (cons $2 $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 19 (Value_def $2 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push
            2
            19
            (begin
              (let ((id (car $2)) (kind (cadr $2)) (def (caddr $2)))
                (Type_def id kind def))))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($6 (vector-ref ___stack (- ___sp 1)))
               ($5 (vector-ref ___stack (- ___sp 3)))
               ($4 (vector-ref ___stack (- ___sp 5)))
               ($3 (vector-ref ___stack (- ___sp 7)))
               ($2 (vector-ref ___stack (- ___sp 9)))
               ($1 (vector-ref ___stack (- ___sp 11))))
          (___push 6 19 (Module_def $2 (Constraint $6 $4)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 19 (Module_def $2 $4))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 20 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 20 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (Signature (reverse $2)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($7 (vector-ref ___stack (- ___sp 1)))
               ($6 (vector-ref ___stack (- ___sp 3)))
               ($5 (vector-ref ___stack (- ___sp 5)))
               ($4 (vector-ref ___stack (- ___sp 7)))
               ($3 (vector-ref ___stack (- ___sp 9)))
               ($2 (vector-ref ___stack (- ___sp 11)))
               ($1 (vector-ref ___stack (- ___sp 13))))
          (___push 7 21 (Functorty $3 $5 $7))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 $2)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 22 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (cons $2 $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (Value_sig $2 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push
            2
            23
            (begin (let ((id (car $2)) (def (cadr $2))) (Type_sig id def))))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 23 (Module_sig $2 $4)))))))

