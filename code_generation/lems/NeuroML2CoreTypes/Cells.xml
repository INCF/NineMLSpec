 <Lems xmlns="http://www.neuroml.org/lems/0.1"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.neuroml.org/lems/0.1 ../Schemas/LEMS/LEMS_v0.1.xsd">

    <!-- A number of cell types for use in NeuroML 2 documents  -->

<Include file="NeuroMLCoreDimensions.xml"/>
<Include file="Channels.xml"/>
<Include file="Synapses.xml"/>
<Include file="Inputs.xml"/>



<!-- PG added description attribute as minimal metadata which can (should?) be added to ComponentType.
     More metadata options should be added later -->
<ComponentType name="abstractCell" description="Base class of any cell which can be used in a population">

</ComponentType>

<ComponentType name="abstractCellMembPot" extends="abstractCell">

    <Exposure name="v" dimension="voltage"/>

    <Behavior>
        <StateVariable name="v" exposure="v" dimension="voltage"/>
    </Behavior>
    
</ComponentType>


<ComponentType name="iafBase" extends="abstractCellMembPot">
    <Parameter name="thresh" dimension="voltage"/>
    <Parameter name="reset" dimension="voltage"/>
</ComponentType>


<ComponentType name="iafTauCell" extends="iafBase">
    <Parameter name="leakReversal" dimension="voltage"/>
    <Parameter name="tau" dimension="time"/>

    <EventPort name="a" direction="out"/>

    <Behavior>
        <StateVariable name="v" exposure="v" dimension="voltage"/>
        <TimeDerivative variable="v" value="(leakReversal - v) / tau"/>

        <OnStart>
             <StateAssignment variable="v" value="reset"/>
        </OnStart>

        <OnCondition test="v .gt. thresh">
            <StateAssignment variable="v" value="reset"/>
            <OutputEvent port="a"/>
        </OnCondition>

    </Behavior>

</ComponentType>



<ComponentType name="iafCapCell" extends="iafBase">
    <Parameter name="leakConductance" dimension="conductance"/>
    <Parameter name="leakReversal" dimension="voltage"/>
    <Parameter name="deltaV" dimension="voltage"/>
    <Parameter name="capacitance" dimension="capacitance"/>
    <EventPort name="spikes-in" direction="in"/>

    <Behavior>
       <StateVariable name="v" exposure="v" dimension="voltage"/>
       <TimeDerivative variable="v" value="leakConductance * (leakReversal - v) / capacitance"/>

       <OnEvent port="spikes-in">
            <StateAssignment variable="v" value="v + deltaV"/>
       </OnEvent>
    </Behavior>

</ComponentType>

<!-- NOTE: Plenty more I&F cells could be added!! -->


<!--
<ComponentType name="abstractNonMorphCell" extends="abstractCellMembPot">

    <Parameter name="v0" dimension="voltage"/>
    <Parameter name="capacitance" dimension="capacitance"/>
    <Parameter name="injection" dimension="current"/>

    <Behavior> 
        <OnStart>
             <StateAssignment variable="v" value="v0"/>
        </OnStart>

        <StateVariable name="v" exposure="v" dimension="voltage"/>
        
        <TimeDerivative variable="v" value="(injection) / capacitance"/>
    </Behavior>
</ComponentType>-->



<ComponentType name="channelPopulation">
        
    <Parameter name="number" dimension="none"/>
    <Parameter name="erev" dimension="voltage"/>
    <ComponentRef name="ionChannel" type="ionChannel"/>
    <Exposure name="i" dimension="current"/>
    <Requirement name="v" dimension="voltage"/>

    <Behavior>
        <!--  RCC: the instantiation of the target of the ComponentRef is no longer implicit (sometimes you want
        references without instantiating the target) so we now have to say explicitly that this population gets 
        an instance of the child put in when it is built -->
        <Build>
            <ChildInstance component="ionChannel"/>
        </Build>
        <DerivedVariable name="channelg" dimension="conductance" select="ionChannel/g"/>
        <DerivedVariable name="geff" value="channelg * number"/>
        <DerivedVariable name="i" exposure="i" value="geff * (erev - v)"/>
    </Behavior>
</ComponentType>


<ComponentType name="channelDensity">
    <Parameter name="condDensity" dimension="conductanceDensity"/>
    <Parameter name="erev" dimension="voltage"/>

    <ComponentRef name="ionChannel" type="ionChannel"/>

    <Exposure name="currentDensity" dimension="currentDensity"/>

    <Exposure name="g" dimension="conductanceDensity"/>

    <Requirement name="v" dimension="voltage"/>
    
    <Behavior>
        <Build>
            <ChildInstance component="ionChannel"/>
        </Build>
        <DerivedVariable name="channelf" dimension="none" select="ionChannel/fopen"/>

        <DerivedVariable name="g" dimension="conductanceDensity" exposure="g" value="condDensity * channelf"/>

        <DerivedVariable name="currentDensity"  dimension="currentDensity" exposure="currentDensity" value="g * (erev - v)"/>

    </Behavior>
</ComponentType>


<ComponentType name="pointCellCondBased" extends="abstractCellMembPot">

    <Parameter name="capacitance" dimension="capacitance"/>
    <Parameter name="v0" dimension="voltage"/>
    <Parameter name="thresh" dimension="voltage"/>

    <Children name="populations" type="channelPopulation"/>
    
    <Attachments name="synapses" type="PointCurrent"/>
    
    <EventPort name="a" direction="out"/>


    <Behavior>

        <StateVariable name="v" exposure="v" dimension="voltage"/>
        <StateVariable name="spiking" dimension="none"/>

        <OnStart>
             <StateAssignment variable="v" value="v0"/>
             <StateAssignment variable="spiking" value="0"/>
        </OnStart>

        <OnCondition test="v .gt. thresh .and. spiking .eq. 0">
            <StateAssignment variable="spiking" value="1"/>
            <OutputEvent port="a"/>
        </OnCondition>

        <OnCondition test="v .lt. thresh">
            <StateAssignment variable="spiking" value="0"/>
        </OnCondition>
        
 
         <DerivedVariable name="totcurrent" dimension="current" select="populations[*]/i" reduce="add"/>
         <DerivedVariable name="synapticCurrent" dimension="current" select="synapses[*]/i" reduce="add" />


        <TimeDerivative variable="v" value="(totcurrent + synapticCurrent) / capacitance"/>
    </Behavior>

</ComponentType>



<ComponentType name="pointDiam">
    <Parameter name="x" dimension="none"/>
    <Parameter name="y" dimension="none"/>
    <Parameter name="z" dimension="none"/>
    <Parameter name="diameter" dimension="none"/>

    <!--<Constant name="lengthScale" dimension="length" value="1.0 mV"/>-->

    <Exposure name="radius" dimension="length"/>
    
    <Behavior>
        <DerivedVariable name="radius" dimension="length" exposure="radius" value="0.000001 * diameter / 2"/>
    </Behavior>

</ComponentType>


<ComponentType name="distal" extends="pointDiam">
</ComponentType>

<ComponentType name="proximal" extends="pointDiam">
</ComponentType>



<ComponentType name="segment">
    <Child name="distal" type="distal"/>
    <Child name="proximal" type="proximal"/>

    

    <Exposure name="surfaceArea" dimension="area"/>
    <Exposure name="radDist" dimension="length"/>

    <Behavior>
        <DerivedVariable name="radDist" dimension="length" exposure="radDist" select = "distal/radius"/>
        <DerivedVariable name="surfaceArea" dimension="area" exposure="surfaceArea" value = "4 * radDist * radDist * 3.14159265"/>
  
    </Behavior>

</ComponentType>


<ComponentType name="segmentGroup">
    <Children name="members" type="member"/>
    <Children name="includes" type="include"/> <!-- TODO deal with <include> used also for including ext NML files... -->
    <Text name="id"/>
</ComponentType>

<ComponentType name="member">
    <Text name="segment"/>
</ComponentType>


<ComponentType name="morphology">
    <Child name="segment" type="segment"/>  <!-- Only one child allowed for now...-->

    <Children name="segmentGroups" type="segmentGroup"/>

    <Exposure name="cellthresh" dimension="voltage"/>

</ComponentType>


<ComponentType name="specificCapacitance">
    <Parameter name="value" dimension="specificCapacitance"/>
    <Exposure name="totSpecCap" dimension="specificCapacitance"/>
    
    <Behavior>
        <DerivedVariable name="totSpecCap" dimension="specificCapacitance" exposure="totSpecCap" value="value"/>
    </Behavior>

</ComponentType>

<ComponentType name="initMembPotential">
    <Parameter name="value" dimension="voltage"/>
    <Exposure name="value" dimension="voltage"/>
    <Behavior>
        <DerivedVariable name="value" dimension="voltage" exposure="value" value="value"/>   <!-- TODO: Remove the need for this... -->
    </Behavior>

</ComponentType>

<ComponentType name="spikeThresh">
    <Parameter name="value" dimension="voltage"/>
    <Exposure name="value" dimension="voltage"/>
    <Behavior>
        <DerivedVariable name="value" dimension="voltage" exposure="value" value="value"/>   <!-- TODO: Remove the need for this... -->
    </Behavior>

</ComponentType>


<ComponentType name="membraneProperties">
    <Child name="specificCapacitance" type="specificCapacitance"/>
    <Child name="initMembPotential" type="initMembPotential"/>
    <Child name="spikeThresh" type="spikeThresh"/>
    <Children name="populations" type="channelPopulation"/>
    <Children name="densities" type="channelDensity"/>

    <Exposure name="totChanPopCurrent" dimension="current"/>
    <Exposure name="totChanDensCurrent" dimension="currentDensity"/>
    <Exposure name="totSpecCap" dimension="specificCapacitance"/>

    <Behavior>
        <DerivedVariable name="totSpecCap" dimension="specificCapacitance" exposure="totSpecCap" select="specificCapacitance/totSpecCap"/>
        <DerivedVariable name="totChanPopCurrent" dimension="current" exposure="totChanPopCurrent" select="populations[*]/i" reduce="add"/>
        <DerivedVariable name="totChanDensCurrent" dimension="current" exposure="totChanDensCurrent" select="densities[*]/currentDensity" reduce="add"/>
    </Behavior>

</ComponentType>



<ComponentType name="biophysicalProperties">
    <Child name="membraneProperties" type="membraneProperties"/>

    <Child name="intracellularProperties" type="intracellularProperties"/>

    <Exposure name="totSpecCap" dimension="specificCapacitance"/>

    <Behavior>
        <DerivedVariable name="totSpecCap" dimension="specificCapacitance" exposure="totSpecCap" select="membraneProperties/totSpecCap"/>
    </Behavior>

</ComponentType>



<ComponentType name="intracellularProperties">
    <Child name="resistivity" type="resistivity"/>
</ComponentType>

<ComponentType name="resistivity">
    <Parameter name="value" dimension="resistivity"/>
</ComponentType>


<ComponentType name="cell" extends="abstractCellMembPot">

    <Child name="notes" type="notes"/>

    <Child name="morphology" type="morphology"/>

    <Child name="biophysicalProperties" type="biophysicalProperties"/>

    <Attachments name="synapses" type="PointCurrent"/>

    <EventPort name="a" direction="out"/>

    <Exposure name="spiking" dimension="none"/>
    <Exposure name="debugVal" dimension="none"/>
    <Exposure name="totChanPopCurrent" dimension="current"/>
    <Exposure name="totChanDensCurrent" dimension="currentDensity"/>
    <Exposure name="totChanCurrent" dimension="current"/>

    <Exposure name="totSpecCap" dimension="specificCapacitance"/>

    <Behavior>
        <StateVariable name="v" exposure="v" dimension="voltage"/>
        <StateVariable name="spiking" exposure="spiking" dimension="none"/>
        <StateVariable name="debugVal" exposure="debugVal" dimension="none"/>

         <DerivedVariable name="initMembPot" dimension="voltage" select="biophysicalProperties/membraneProperties/initMembPotential/value"/>
         <DerivedVariable name="thresh" dimension="voltage" select="biophysicalProperties/membraneProperties/spikeThresh/value"/>

        <OnStart>
             <StateAssignment variable="spiking" value="0"/>
        </OnStart>


        <OnCondition test="t .eq. 0">
             <StateAssignment variable="v" value="initMembPot"/>
        </OnCondition>

        <OnCondition test="v .gt. thresh .and. spiking .eq. 0">
            <StateAssignment variable="spiking" value="1"/>
            <OutputEvent port="a"/>
        </OnCondition>

        <OnCondition test="v .lt. thresh">
            <StateAssignment variable="spiking" value="0"/>
        </OnCondition>

        <OnCondition test="t .geq. 0">
            <StateAssignment variable="debugVal" value="debug"/>
        </OnCondition>

         <DerivedVariable name="debug" dimension="none" select="biophysicalProperties/membraneProperties/totChanDensCurrent"/>

         <DerivedVariable name="cellSurfaceArea" dimension="area" select="morphology/segment/surfaceArea"/>


         <DerivedVariable name="totSpecCap" dimension="specificCapacitance" exposure="totSpecCap" select="biophysicalProperties/totSpecCap"/>

         <DerivedVariable name="totCap" dimension="capacitance" value="totSpecCap * cellSurfaceArea "/>

         <DerivedVariable name="totChanPopCurrent" dimension="current" exposure="totChanPopCurrent" select="biophysicalProperties/membraneProperties/totChanPopCurrent"/>
         <DerivedVariable name="totChanDensCurrent" dimension="currentDensity" exposure="totChanDensCurrent" select="biophysicalProperties/membraneProperties/totChanDensCurrent"/>
         <DerivedVariable name="totChanCurrent" dimension="current" exposure="totChanCurrent" value="totChanDensCurrent * cellSurfaceArea "/>


         <DerivedVariable name="synapticCurrent" dimension="current" select="synapses[*]/i" reduce="add" />



        <TimeDerivative variable="v" value="totChanPopCurrent +totChanCurrent + synapticCurrent) / totCap"/>
    </Behavior>

</ComponentType>


<ComponentType name="izhikevichCell" extends="abstractCellMembPot">

    <Parameter name="v0" dimension="voltage"/>
    <Parameter name="a" dimension="none"/>
    <Parameter name="b" dimension="none"/>
    <Parameter name="c" dimension="none"/>
    <Parameter name="d" dimension="none"/>
    <Parameter name="thresh" dimension="voltage"/>
    <Parameter name="Iamp" dimension="none"/>
    <Parameter name="Idel" dimension="time"/>
    <Parameter name="Idur" dimension="time"/>

    <!-- These are needed to ensure a, b, c, d, U & I remain dimensionless... -->
    <Constant name="tscale" dimension="per_time" value="1per_ms"/>
    <Constant name="vscale" dimension="voltage" value="1mV"/>
    <Constant name="pervscale" dimension="per_voltage" value="1per_mV"/>

    <EventPort name="a" direction="out"/>

    <Exposure name="U" dimension="none"/>
    <Exposure name="I" dimension="none"/>

    <Behavior>

        <StateVariable name="v" dimension="voltage" exposure="v"/>
        <StateVariable name="U" dimension="none" exposure="U"/>
        <StateVariable name="I" dimension="none" exposure="I"/>

        <OnStart>
             <StateAssignment variable="v" value="v0"/>
             <StateAssignment variable="U" value="v0 * b * pervscale"/>
             <StateAssignment variable="I" value="0"/>
        </OnStart>

        <OnCondition test="v .gt. thresh">
            <StateAssignment variable="v" value="c*vscale"/>
            <StateAssignment variable="U" value="U+d"/>
            <OutputEvent port="a"/>
        </OnCondition>

        <OnCondition test="t .gt. Idel .and. t .lt. Idel+Idur">
            <StateAssignment variable="I" value="Iamp"/>
        </OnCondition>

        <OnCondition test="t .gt. Idel+Idur">
            <StateAssignment variable="I" value="0"/>
        </OnCondition>

        <TimeDerivative variable="v" value="vscale*tscale * (0.04*v*v*pervscale*pervscale + 5*v*pervscale + 140.0 - U + I)"/>
        <TimeDerivative variable="U" value="tscale * a * (b*v*pervscale - U)"/>

    </Behavior>

</ComponentType>



<ComponentType name="adExIaFCell" extends="abstractCellMembPot">

    <Parameter name="C" dimension="capacitance"/>
    <Parameter name="gL" dimension="conductance"/>
    <Parameter name="EL" dimension="voltage"/>
    <Parameter name="VT" dimension="voltage"/>
    <Parameter name="thresh" dimension="voltage"/>
    <Parameter name="reset" dimension="voltage"/>
    <Parameter name="delT" dimension="voltage"/>
    <Parameter name="tauw" dimension="time"/>

    <Parameter name="Iamp" dimension="current"/>
    <Parameter name="Idel" dimension="time"/>
    <Parameter name="Idur" dimension="time"/>

    <Parameter name="a" dimension="conductance"/>
    <Parameter name="b" dimension="current"/>

    <EventPort name="a" direction="out"/>

    <Exposure name="w" dimension="current"/>
    <Exposure name="I" dimension="current"/>

    <Behavior>

        <StateVariable name="v" dimension="voltage" exposure="v"/>  
        <StateVariable name="w" dimension="current" exposure="w"/>
        <StateVariable name="I" dimension="current" exposure="I"/>

        <OnStart>
             <StateAssignment variable="v" value="reset"/>
             <StateAssignment variable="w" value="b"/>
             <StateAssignment variable="I" value="0"/>
        </OnStart>

        <OnCondition test="v .gt. thresh">
            <StateAssignment variable="v" value="reset"/>
            <StateAssignment variable="w" value="w+b"/>
            <OutputEvent port="a"/>
        </OnCondition>

        <OnCondition test="t .gt. Idel .and. t .lt. Idel+Idur">
            <StateAssignment variable="I" value="Iamp"/>
        </OnCondition>

        <OnCondition test="t .gt. Idel+Idur">
            <StateAssignment variable="I" value="0"/>
        </OnCondition>

        <TimeDerivative variable="v" value="(-1*gL*(v-EL) + gL*delT*exp((v - VT)/delT) - w + I)/C"/>
        <TimeDerivative variable="w" value="(a*(v-EL) - w) / tauw"/>

    </Behavior>

</ComponentType>


</Lems>