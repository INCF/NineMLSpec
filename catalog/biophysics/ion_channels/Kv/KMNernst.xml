<?xml version="1.0" encoding="UTF-8"?>
<NineML xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://nineml.incf.org/9ML/0.3"
  xsi:schemaLocation="http://nineml.incf.org/9ML/NineML_v0.3.xsd">
  <ComponentClass xmlns="" name="KMdef">
    <Parameter name="Aalpha_n" dimension="frequency"/>
    <Parameter name="Kalpha_n" dimension="voltage"/>
    <Parameter name="V0alpha_n" dimension="voltage"/>
    <Parameter name="Abeta_n" dimension="frequency"/>
    <Parameter name="Kbeta_n" dimension="voltage"/>
    <Parameter name="V0beta_n" dimension="voltage"/>
    <Parameter name="V0_ninf" dimension="voltage"/>
    <Parameter name="B_ninf" dimension="concentration"/>
    <Parameter name="gbar" dimension="conductance_density"/>
    <AnalogPort mode="recv" name="internalK" dimension="current_density"/>
    <AnalogPort mode="recv" name="externalK" dimension="current_density"/>
    <AnalogPort mode="recv" name="celsius" dimension="temperature"/>
    <AnalogPort mode="recv" name="v" dimension="voltage"/>
    <AnalogPort mode="send" name="i" dimension="current_density"/>
    <Dynamics>
      <StateVariable name="m">
        <Initial>(1 / (1 + exp((neg(v - V0_ninf)) / B_ninf)))</Initial>
      </StateVariable>
      <Alias name="i">
       <MathInline>gbar * m * (v - e_reversal)</MathInline>
      </Alias>
      <Regime>
        <TimeDerivative variable="m">
          <MathInline>(m_inf - m) / m_tau</MathInline>
        </TimeDerivative>
      </Regime>
      <Alias name="m_inf">
        <MathInline>(1 / (1 + exp((neg(v - V0_ninf)) / B_ninf)))</MathInline>
      </Alias>
      <Alias name="m_tau">
        <MathInline>(1 / (alpha_n + beta_n))</MathInline>
      </Alias>
      <Alias name="Q10">
        <MathInline>pow(3, (celsius - 22) / 10)</MathInline>
      </Alias>
      <Alias name="alpha_n">
        <MathInline>Q10 * Aalpha_n * exp((v - V0alpha_n) /
          Kalpha_n)</MathInline>
      </Alias>
      <Alias name="beta_n">
        <MathInline>Q10 * Abeta_n * exp((v - V0beta_n) /
          Kbeta_n)</MathInline>
      </Alias>
      <Alias name="e_reversal">
        <math xmlns="http://www.w3.org/1998/Math/MathML">
          <piecewise>
            <piece>
              <ci>nerstLowerLimit</ci>
              <apply><leq/><ci>externalK</ci><ci>zeroConc</ci></apply>
            </piece>            
            <piece>
              <ci>nerstUpperLimit</ci>
              <apply>
                <and/>
                <apply><leq/><ci>internalK</ci><ci>zeroConc</ci></apply>
                <apply><gt/><ci>externalK</ci><ci>zeroConc</ci></apply>
              </apply>
            </piece>
            <otherwise>
              <ci>nernstPotential</ci>
            </otherwise>
          </piecewise>
        </math>
      </Alias>
      <Alias name="zeroConc">
        <Value units="mM">0.0</Value>
      </Alias>
      <Alias name="nernstPotential">
        <MathInline>  
          log(externalK / internalK) * UniversalGasConstant * 
          (celsius - AbsoluteZero) / (Faraday * IonicValence)
        </MathInline>
      </Alias>
      <Alias name="Faraday">
        <Value units="C/mol">96485.309</Value>
      </Alias>
      <Alias name="UniversalGasConstant">
        <Value units="J/(K * mol)">8.314472</Value>
      </Alias>
      <Alias name="AbsoluteZero">
        <Value units="K">âˆ’273.15</Value>
      </Alias>
      <Alias name="IonicValence">
        <Value>2</Value>
      </Alias>
      <Alias name="nernstLowerLimit">
        <Value units="mV">-1e6</Value>
      </Alias>      
      <Alias name="nernstUpperLimit">
        <Value units="mV">1e6</Value>
      </Alias>   
    </Dynamics>
  </ComponentClass>
</NineML>
